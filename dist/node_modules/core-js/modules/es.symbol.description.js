import global from'../internals/global.js';import DESCRIPTORS from'../internals/descriptors.js';import isObject from'../internals/is-object.js';import has from'../internals/has.js';import _ref2 from'../internals/object-define-property.js';import copyConstructorProperties from'../internals/copy-constructor-properties.js';import $ from'../internals/export.js';(function(module,exports){var defineProperty=_ref2.f,NativeSymbol=global.Symbol;if(DESCRIPTORS&&"function"==typeof NativeSymbol&&(!("description"in NativeSymbol.prototype)||NativeSymbol().description!==void 0)){var EmptyStringDescriptionStore={},SymbolWrapper=function Symbol(){var description=1>arguments.length||void 0===arguments[0]?void 0:String(arguments[0]),result=this instanceof SymbolWrapper?new NativeSymbol(description):void 0===description?NativeSymbol():NativeSymbol(description);return ""===description&&(EmptyStringDescriptionStore[result]=!0),result};copyConstructorProperties(SymbolWrapper,NativeSymbol);var symbolPrototype=SymbolWrapper.prototype=NativeSymbol.prototype;symbolPrototype.constructor=SymbolWrapper;var symbolToString=symbolPrototype.toString,native="Symbol(test)"==String(NativeSymbol("test")),regexp=/^Symbol\((.*)\)[^)]+$/;defineProperty(symbolPrototype,"description",{configurable:!0,get:function description(){var symbol=isObject(this)?this.valueOf():this,string=symbolToString.call(symbol);if(has(EmptyStringDescriptionStore,symbol))return "";var desc=native?string.slice(7,-1):string.replace(regexp,"$1");return ""===desc?void 0:desc}}),$({global:!0,forced:!0},{Symbol:SymbolWrapper});}})();