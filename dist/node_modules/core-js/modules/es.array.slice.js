import toIndexedObject from'../internals/to-indexed-object.js';import isObject from'../internals/is-object.js';import toLength from'../internals/to-length.js';import toAbsoluteIndex from'../internals/to-absolute-index.js';import $ from'../internals/export.js';import wellKnownSymbol from'../internals/well-known-symbol.js';import arrayMethodUsesToLength from'../internals/array-method-uses-to-length.js';import isArray from'../internals/is-array.js';import createProperty from'../internals/create-property.js';import arrayMethodHasSpeciesSupport from'../internals/array-method-has-species-support.js';var HAS_SPECIES_SUPPORT=arrayMethodHasSpeciesSupport("slice"),USES_TO_LENGTH=arrayMethodUsesToLength("slice",{ACCESSORS:!0,0:0,1:2}),SPECIES=wellKnownSymbol("species"),nativeSlice=[].slice,max=Math.max;$({target:"Array",proto:!0,forced:!HAS_SPECIES_SUPPORT||!USES_TO_LENGTH},{slice:function slice(start,end){var Constructor,result,n,O=toIndexedObject(this),length=toLength(O.length),k=toAbsoluteIndex(start,length),fin=toAbsoluteIndex(void 0===end?length:end,length);if(isArray(O)&&(Constructor=O.constructor,"function"==typeof Constructor&&(Constructor===Array||isArray(Constructor.prototype))?Constructor=void 0:isObject(Constructor)&&(Constructor=Constructor[SPECIES],null===Constructor&&(Constructor=void 0)),Constructor===Array||void 0===Constructor))return nativeSlice.call(O,k,fin);for(result=new(void 0===Constructor?Array:Constructor)(max(fin-k,0)),n=0;k<fin;k++,n++)k in O&&createProperty(result,n,O[k]);return result.length=n,result}});